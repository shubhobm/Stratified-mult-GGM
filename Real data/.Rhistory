unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr1.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
cbind(
unlist(lapply(corr2.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr2.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
sapply(out.df.list, function(x) x[, auc(y,yhat)])
sapply(corr1.list, function(x) auc(x[,1],x[,2]))
sapply(corr2.list, function(x) auc(x[,1],x[,2]))
?spatialBlock
# sbl = spatialBlock(st_as_sf(demo_pt), species = "Y", rows=10,cols=5)
sbl = spatialBlock(st_as_sf(demo_pt), species = "Y",
theRange=12000, blocks=SpatialPolygons(demo_cma3))
class(demo_cma3@polygons)
# sbl = spatialBlock(st_as_sf(demo_pt), species = "Y", rows=10,cols=5)
sbl = spatialBlock(st_as_sf(demo_pt), species = "Y",
theRange=12000, blocks=demo_cma3@polygons)
# sbl = spatialBlock(st_as_sf(demo_pt), species = "Y", rows=10,cols=5)
sbl = spatialBlock(st_as_sf(demo_pt), species = "Y",
theRange=12000, blocks=st_as_sf(demo_cma3))
kmax
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("data.table","tidyverse","stringr","rebus",
"udpipe","httr","magrittr","parallel","tabulizer")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
install.packages("rebus")
install.packages("udpipe")
install.packages("tabulizer")
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("data.table","tidyverse","stringr","rebus",
"udpipe","httr","magrittr","parallel","tabulizer")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
install.packages("tabulizer")
library(tabulizer)
install.packages("yaml")
library(yaml)
yobj = read_yaml("http://proceedings.mlr.press/v86/citeproc.yaml")
yobj = yaml.load_file("http://proceedings.mlr.press/v86/citeproc.yaml")
yobj
length(yobj)
yobj[[1]]
names(yobj)
names(yobj[[1]])
sapply(yobj, function(x) x$title)
sapply(yobj, function(x) with(x, c(id,title)))
lapply(yobj, function(x) with(x, c(id,title)))
matrix(sapply(yobj, function(x) with(x, c(id,title)))
,ncol=2,byrow=T)
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("yaml")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
title_list = vector("list",116)
pb = txtProgressBar(0,116)
for(i in 1:116){
cat("Doing f")
yobj = yaml.load_file(paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml"))
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("yaml")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
title_list = vector("list",116)
pb = txtProgressBar(0,116)
for(i in 1:116){
yobj = yaml.load_file(paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml"))
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
close(pb)
i
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
url.exists(ilink)
install.packages("RCurl")
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("yaml","RCurl")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
url.exists(ilink)
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("yaml","RCurl")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
title_list = vector("list",116)
pb = txtProgressBar(0,116)
for(i in 1:116){
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yobj = yaml.load_file(ilink)
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
}
close(pb)
yobj = yaml.load_file(ilink,fileEncoding = "UTF-8")
read_yaml(ilink,fileEncoding = "UTF-8")
for(i in 72:116){# error in 71
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yobj = yaml.load_file(ilink,fileEncoding = "UTF-8")
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
}
for(i in 72:116){ # error at 71
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ifile)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 72:116){ # error at 71
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 90:116){ # error at 71, 89
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 90:116){ # error at 71, 89, 96
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 97:116){ # error at 71, 89, 96
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 97:116){ # error at 71, 89, 96, 97
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
install.packages("bibtex")
ilink = paste0("http://proceedings.mlr.press/v",i,"/bibliography.bib")
ibib = bibtex::read.bib(ilink)
ilink
i = 71
ilink = paste0("http://proceedings.mlr.press/v",i,"/bibliography.bib")
ibib = bibtex::read.bib(ilink)
getwd()
system(paste0("wget ",ilink))
list.files()
ibib = bibtex::read.bib("bibliography.bib")
names(all_titles) = c("id","title")
library(rgdal)
ny = readOGR("c:/Users/subho/Downloads/pokemon_go_map.geojson")
clasS(ny)
class(ny)
names(ny)
ny@data[,1]
ny@data[1,]
plot(y)
plot(ny)
plot(ny, pch=19, cex=.5)
ny = readOGR("c:/Users/subho/Downloads/CTA_ParkandRide.shp")
ny@data[1,]
ny@data[2,]
plot(ny)
ny = readOGR("c:/Users/subho/Downloads/Divvy_Bicycle_Stations_all_Map.csv")
chi = fread("c:/Users/subho/Downloads/Divvy_Bicycle_Stations_all_Map.csv")
library(data.table)
chi = fread("c:/Users/subho/Downloads/Divvy_Bicycle_Stations_all_Map.csv")
chi[1]
coordinates(chi) = c("Longitude","LAtitude")
coordinates(chi) = c("Longitude","Latitude")
plot(chi)
plot(chi, pch=19)
plot(chi, pch=19, cex=.5)
load("C:/Study/Stratified-mult-GGM/Codes/Revision/Separate-testing/testsep_n100p30q60_1.Rda")
ls()
out.mat
rm(list=ls())
# setwd('d:/Study/My projects/Stratified-mult-GGM/Codes')
source('jsem.R')
source('Generator.R')
source('l1LS_Main.R')
source('Objval.R')
source('JMLE.R')
library(glasso)
library(parallel)
?glmnet
?glmnet::glmnet
install.packages("gender")
library(gender)
gender("adegboyega")
install.packages("genderdata", repos = "https://dev.ropensci.org", type = "source")
library(devtools)
install_github("https://github.com/ropensci/genderdata/")
gender("adegboyega")
gender("winston")
gender("william")
gender("arun")
gender("ananya")
gender("lakesha")
gender("shawndra")
gender("ayushi")
gender("baharan")
gender("ayesha")
gender("asia")
gender("xava")
gender("yolanda")
a=gender("yolanda")
a
a$proportion_male
sqrt(log(p)/min(n)) * seqgetwd((1, 0.4, -0.1)
getwd()
# initial work
rm(list=ls())
# setwd("/n/subho-data/JMMLE-outputs/real-data")
setwd("C:/Study/Stratified-mult-GGM/Real data/")
Required.Packages <- c("data.table", "parallel")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
## load data ***********************************************************
# **********************************************************************
data = readRDS("processed_data.rds")
# load cv results
cv_results = readRDS("cv_results_jsem.rds")
X = data$X.list1
Y = data$Y.list1
n = sapply(X, nrow)
p = ncol(X[[1]])
q = ncol(Y[[1]])
K = 2
nrep = length(cv_results)
# initial work
rm(list=ls())
# setwd("/n/subho-data/JMMLE-outputs/real-data")
setwd("C:/Study/Stratified-mult-GGM/Real data/")
Required.Packages <- c("data.table", "parallel")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
## load data ***********************************************************
# **********************************************************************
data = readRDS("processed_data.rds")
cv_results = readRDS("cv_results.rds")
cv_splits = readRDS("cv_splits.rds")
X = data$X.list1
Y = data$Y.list1
n = sapply(X, nrow)
p = ncol(X[[1]])
q = ncol(Y[[1]])
K = 2
nrep = 100
## compute MSSPE = scaled prediction error
spe.vec = rep(0, nrep)
Bprop.vec = rep(0, nrep)
Oprop.vec = rep(0, nrep)
which_good = which(cv_results$hbic>0)
for(i in which_good){
iBhat = cv_results$best_model[[i]]$B.refit
iOmega = cv_results$best_model[[i]]$Theta_refit$Omega
for(k in 1:K){
train.ik = cv_splits[[k]][[i]]
spe.vec[i] = spe.vec[i] + sum(diag(
crossprod(Y[[k]][-train.ik,] - X[[k]][-train.ik,] %*% iBhat[,,k]) %*% iOmega[[k]]
))/n[k]
}
Bprop.vec[i] = mean(iBhat!=0)
# non-zero coef proportion in Omega_y
iTheta = array(0, c(q,q,K))
for(k in 1:K){
iTheta[,,k] = iOmega[[k]]
}
for(j in 1:q){
iTheta[j,j,] = 0
}
Oprop.vec[i] = mean(iTheta!=0)
}
summarize = function(x) c(mean(x), sd(x))
summarize(sqrt(spe.vec[which_good]))
summarize(Bprop.vec[which_good])
summarize(Oprop.vec[which_good])
## compute MSSPE = scaled prediction error
spe0.vec = rep(0, nrep)
for(i in which(cv_results$hbic>0)){
iBhat = cv_results$best_model[[i]]$B.refit
iOmega = cv_results$best_model[[1]]$Theta_refit$Omega
for(k in 1:K){
train.ik = cv_splits[[k]][[i]]
spe0.vec[i] = spe.vec[i] + sum(diag(
crossprod(Y[[k]][-train.ik,]) %*% iOmega[[k]]
))/n[k]
}
}
summarize(sqrt(spe0.vec))
# initial work
rm(list=ls())
# setwd("/n/subho-data/JMMLE-outputs/real-data")
setwd("C:/Study/Stratified-mult-GGM/Real data/")
Required.Packages <- c("data.table", "parallel")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
## load data ***********************************************************
# **********************************************************************
data = readRDS("processed_data.rds")
# load cv results
cv_results = readRDS("cv_results_jsem.rds")
X = data$X.list1
Y = data$Y.list1
n = sapply(X, nrow)
p = ncol(X[[1]])
q = ncol(Y[[1]])
K = 2
nrep = length(cv_results)
## compute MSSPE = scaled prediction error
spe.vec = rep(0, nrep)
Oprop.vec = rep(0, nrep)
i
i=1
iOmega = cv_results$best_model[[i]]$Theta_refit$Omega
for(k in 1:K){
train.ik = cv_splits[[k]][[i]]
spe.vec[i] = spe.vec[i] + sum(diag(
crossprod(Y[[k]][-train.ik,]) %*% iOmega[,,k]))/n[k]
}
data = readRDS("processed_data.rds")
cv_results = readRDS("cv_results_jsem.rds")
cv_splits = readRDS("cv_splits.rds")
X = data$X.list1
Y = data$Y.list1
n = sapply(X, nrow)
p = ncol(X[[1]])
q = ncol(Y[[1]])
K = 2
nrep = length(cv_results)
iOmega = cv_results$best_model[[i]]$Theta_refit$Omega
for(k in 1:K){
train.ik = cv_splits[[k]][[i]]
spe.vec[i] = spe.vec[i] + sum(diag(
crossprod(Y[[k]][-train.ik,]) %*% iOmega[,,k]))/n[k]
}
for(k in 1:K){
train.ik = cv_splits[[k]][[i]]
spe.vec[i] = spe.vec[i] + sum(diag(
crossprod(Y[[k]][-train.ik,]) %*% %*% iOmega[[k]]))/n[k]
}
for(k in 1:K){
train.ik = cv_splits[[k]][[i]]
spe.vec[i] = spe.vec[i] + sum(diag(
crossprod(Y[[k]][-train.ik,]) %*% iOmega[[k]]))/n[k]
}
dim(iOmega[[k]])
iOmega = cv_results$best_model[[i]]$Theta_refit$Omega
iOmega = cv_results$best_model[[i]]$Omega
for(k in 1:K){
train.ik = cv_splits[[k]][[i]]
spe.vec[i] = spe.vec[i] + sum(diag(
crossprod(Y[[k]][-train.ik,]) %*% iOmega[[k]]))/n[k]
}
dim(iOmega)
dim(iOmega[[1]])
iOmega
iOmega = cv_results[[i]]$Omega
length(iOmega)
iOmega
names(cv_results[[i]])
cv_results[[i]]$Theta
names(cv_results[[i]]$Theta
)
length(cv_results[[i]]$Theta)
dim(cv_results[[i]]$Theta[[1]])
dim(cv_results[[i]]$Theta[[2]])
names(cv_results[[i]])
# non-zero coef proportion in Omega_y
iTh = cv_results[[i]]$Theta
iTheta = array(0, c(q,q,K))
for(k in 1:K){
iTheta[,,k] = iTh[[k]]
}
for(j in 1:q){
iTheta[j,j,] = 0
}
## compute MSSPE = scaled prediction error
Oprop.vec = rep(0, nrep)
for(i in 1:nrep){
# non-zero coef proportion in Omega_y
iTh = cv_results[[i]]$Theta
iTheta = array(0, c(q,q,K))
for(k in 1:K){
iTheta[,,k] = iTh[[k]]
}
for(j in 1:q){
iTheta[j,j,] = 0
}
}
summarize = function(x) c(mean(x), sd(x))
summarize(Oprop.vec[which_good])
summarize(Oprop.vec)
for(i in 1:nrep){
# non-zero coef proportion in Omega_y
iTh = cv_results[[i]]$Theta
iTheta = array(0, c(q,q,K))
for(k in 1:K){
iTheta[,,k] = iTh[[k]]
}
for(j in 1:q){
iTheta[j,j,] = 0
}
Oprop.vec[i] = mean(iTheta!=0)
}
summarize = function(x) c(mean(x), sd(x))
summarize(Oprop.vec)
summarize(sqrt(spe0.vec))
# initial work
rm(list=ls())
# setwd("/n/subho-data/JMMLE-outputs/real-data")
setwd("C:/Study/Stratified-mult-GGM/Real data/")
Required.Packages <- c("data.table", "parallel")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
## load data ***********************************************************
# **********************************************************************
data = readRDS("processed_data.rds")
cv_results = readRDS("cv_results.rds")
cv_splits = readRDS("cv_splits.rds")
X = data$X.list1
Y = data$Y.list1
n = sapply(X, nrow)
p = ncol(X[[1]])
q = ncol(Y[[1]])
K = 2
nrep = 100
## compute MSSPE = scaled prediction error
spe.vec = rep(0, nrep)
Bprop.vec = rep(0, nrep)
Oprop.vec = rep(0, nrep)
which_good = which(cv_results$hbic>0)
for(i in which_good){
iBhat = cv_results$best_model[[i]]$B.refit
iOmega = cv_results$best_model[[i]]$Theta_refit$Omega
for(k in 1:K){
train.ik = cv_splits[[k]][[i]]
spe.vec[i] = spe.vec[i] + sum(diag(
crossprod(Y[[k]][-train.ik,] - X[[k]][-train.ik,] %*% iBhat[,,k]) %*% iOmega[[k]]
))/n[k]
}
Bprop.vec[i] = mean(iBhat!=0)
# non-zero coef proportion in Omega_y
iTheta = array(0, c(q,q,K))
for(k in 1:K){
iTheta[,,k] = iOmega[[k]]
}
for(j in 1:q){
iTheta[j,j,] = 0
}
Oprop.vec[i] = mean(iTheta!=0)
}
summarize = function(x) c(mean(x), sd(x))
summarize(sqrt(spe.vec[which_good]))
summarize(Bprop.vec[which_good])
summarize(Oprop.vec[which_good])
## compute MSSPE = scaled prediction error
spe0.vec = rep(0, nrep)
for(i in which(cv_results$hbic>0)){
iBhat = cv_results$best_model[[i]]$B.refit
iOmega = cv_results$best_model[[1]]$Theta_refit$Omega
for(k in 1:K){
train.ik = cv_splits[[k]][[i]]
spe0.vec[i] = spe.vec[i] + sum(diag(
crossprod(Y[[k]][-train.ik,]) %*% iOmega[[k]]
))/n[k]
}
}
summarize(sqrt(spe0.vec))
