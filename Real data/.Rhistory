yhat = gw.fitted(
demo_cma3@data[test][,cbind(1, high_influencers, high_adopters,
total_traffic_dl,outdoor_traffic_dl,
iqi_avg_rsrp,iqi_median_rsrp,
iqi_avg_rsrq,iqi_median_rsrq,iqi_count,
port_inout_ratio,black/pop)],
as.matrix(gwrmod$SDF@data))
yhat = as.numeric(exp(yhat)/(1+exp(yhat)))
blpct = demo_cma3@data[test, black/pop]
out.df = data.table(y,yhat,blpct,demo_cma3@data[
test,c("tile_id","cent_lon_4326","cent_lat_4326")])[order(yhat, decreasing=T)]
# post-proc debiasing: Geyik et al 2019
# initialize
cat("Fold", ind, ": Naive correction\n")
s = vector("list", 2)
s[[1]] = out.df[blpct<=.3]
s[[2]] = out.df[blpct>.3]
kmax = 1e3
p = sapply(s,nrow)/out.df[,.N] # class probs
counts = c(0,0) # attr value counts
a = c(0,1)
rankedAttList = c()
rankedScoreList = c()
rankedRespList = c()
# run
for(k in 1:kmax){
belowMin = which(counts < floor(k*p))
belowMax = which(counts >= floor(k*p) & counts < ceiling(k*p))
if(length(belowMin) != 0){
nextAtt = belowMin[which.max(sapply(belowMin, function(x) s[[x]][counts[x]+1, yhat]))]
} else{
nextAtt = belowMax[which.max(sapply(belowMax, function(x) s[[x]][counts[x]+1, yhat]))]
}
if(counts[nextAtt]+1 <= nrow(s[[nextAtt]])){
rankedAttList[k] = nextAtt
rankedRespList[k] = s[[nextAtt]][counts[nextAtt]+1, y]
rankedScoreList[k] = s[[nextAtt]][counts[nextAtt]+1, yhat]
counts[nextAtt] = counts[nextAtt]+1
} else{
break
}
}
corr1.list[[ind]] = cbind(rankedRespList,rankedScoreList)
# spatial version of above
cat("Fold", ind, ": Spatial correction\n")
# initialize
s = vector("list", 2)
s[[1]] = out.df[blpct<=.3]
s[[2]] = out.df[blpct>.3]
kmax = 1e3
p = sapply(s,nrow)/out.df[,.N] # class probs
counts = c(0,0) # attr value counts
a = c(0,1)
rankedAttList = c()
rankedScoreList = c()
rankedRespList = c()
nbmat1 = (distmat<.004*5)
allTiles = colnames(nbmat1)
set.seed(06092020)
for(k in 1:kmax){
belowMin = which(counts < floor(k*p))
belowMax = which(counts >= floor(k*p) & counts < ceiling(k*p))
if(length(belowMin) != 0){
nextAtt = belowMin[which.max(sapply(belowMin, function(x) s[[x]][counts[x]+1, yhat]))]
} else{
nextAtt = belowMax[which.max(sapply(belowMax, function(x) s[[x]][counts[x]+1, yhat]))]
}
if(counts[nextAtt]+1 <= nrow(s[[nextAtt]])){
rankedAttList[k] = nextAtt
# decide next score index
nextInd = counts[nextAtt]+1
sNext = s[[nextAtt]]
scoreCands = sapply(s, function(x) x[nextInd, yhat])
if(nextAtt != which.max(scoreCands)){ # if score is not max at nextAtt..
maxTile = s[[which.max(scoreCands)]][nextInd, tile_id]
maxInd = which(allTiles==maxTile)
pickInds = which(nbmat1[,maxInd])
pickTiles = allTiles[pickInds]
pickIndsAtt = which(pickTiles %in% sNext[!(1:nextInd), tile_id])
if(length(pickIndsAtt)>0){
pickTilesAtt = pickTiles[pickIndsAtt]
pickDistsAtt = distmat[pickInds,maxInd][pickIndsAtt]
nextTile = sample(pickTilesAtt, 1, prob=exp(-pickDistsAtt))
# nextInd = sNext[, which(tile_id == nextTile)]
# cat("changed!\n")
whichNext = sNext[, which(tile_id == nextTile)]
if(whichNext != nextInd){ # if picked tile is not same as nextInd, add it to nextInd and shift everything below
sNext = sNext[c(1:(nextInd-1), whichNext, nextInd:sNext[,.N])][!(whichNext+1)]
}
}
}
rankedRespList[k] = sNext[nextInd, y]
rankedScoreList[k] = sNext[nextInd, yhat]
counts[nextAtt] = nextInd
} else{
break
}
}
corr2.list[[ind]] = cbind(rankedRespList,rankedScoreList)
out.df.list[[ind]] = out.df
}
sapply(out.df.list, function(x) x[, auc(y,yhat)])
sapply(corr1.list, function(x) auc(x[,1],x[,2]))
sapply(corr2.list, function(x) auc(x[,1],x[,2]))
plot(density(out.df.list[[1]]$yhat))
plot(density(out.df.list[[1]][y==1, yhat]))
lines(density(out.df.list[[1]][y==0, yhat]), col="red")
plot(density(out.df.list[[1]][y==1, yhat]), col="darkgreen")
plot(density(out.df.list[[1]][y==0, yhat]), col="red")
lines(density(out.df.list[[1]][y==0, yhat]), col="darkgreen")
plot(density(out.df.list[[1]][y==0, yhat]), col="red")
lines(density(out.df.list[[1]][y==1, yhat]), col="darkgreen")
out.df.list[[1]][1]
plot(density(out.df.list[[1]][y==TRUE, yhat]), col="red")
out.df.list[[1]][,.N]
out.df.list[[1]][,.N,by=y]
demo_cma3@data[,mean(log(profitability+1)>=8)]
EvaluationMeasures.table(c(1,0,1,0,1,0,1,0),c(1,1,1,1,1,0,0,0))
install.packages("EvaluationMeasures")
require(EvaluationMeasures)
EvaluationMeasures.table(c(1,0,1,0,1,0,1,0),c(1,1,1,1,1,0,0,0))
EvaluationMeasures.TPR(c(1,0,1,0,1,0,1,0),c(1,1,1,1,1,0,0,0))
library(caret)
?sensitivity
?tpr
?precision
?tpr
lapply(out.df.list, function(x)
x[,recall(y,yhat,cutoff=.2)])
lapply(out.df.list, function(x)
x[,recall(as.factor(y),yhat,cutoff=.2)])
out.df.list[recall(y,yhat,.2)]
out.df.list[recall(as.factor(y),yhat,.2)]
out.df.list[recall(as.factor(y),as.facor(yhat),.2)]
out.df.list[recall(as.factor(y),as.factor(yhat),.2)]
out.df.list[recall(as.factor(as.numeric(y)),yhat,.2)]
lapply(out.df.list, function(x)
x[,sensitivity(y,yhat>.2,positive = "TRUE")])
lapply(out.df.list, function(x)
x[,sensitivity(as.factor(y),yhat>.2,positive = "TRUE")])
lapply(out.df.list, function(x)
x[,sensitivity(as.factor(y),as.factor(yhat)>.2,positive = "TRUE")])
lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat)>.2,positive = "TRUE"))
out.df.list[1]
?sensitivity
lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>.2),positive = "TRUE"))
lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>.2),negative="FALSE"))
lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>.18),positive ="TRUE"))
lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>.18),negative="FALSE"))
lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>.25),positive ="TRUE"))
lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>.25),negative="FALSE"))
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>.2),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>.2),negative="FALSE")))
)
cutoff = .15
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cutoff = .25
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cutoff = .3
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cutoff = .4
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cutoff = .5
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cutoff = .6
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cutoff = .5
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(x[,2]>cutoff),positive ="TRUE"))),
unlist(lapply(corr1.list, function(x)
specificity(as.factor(x[,1]),as.factor(x[,2]>cutoff),negative="FALSE")))
)
corr1.list[1]
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(x[,2]>cutoff),positive ="1"))),
unlist(lapply(corr1.list, function(x)
specificity(as.factor(x[,1]),as.factor(x[,2]>cutoff),negative="0")))
)
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.numeric(x[,1]),as.numeric(x[,2]>cutoff),positive ="1"))),
unlist(lapply(corr1.list, function(x)
specificity(as.numeric(x[,1]),as.numeric(x[,2]>cutoff),negative="0")))
)
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr1.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cbind(
unlist(lapply(corr2.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr2.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
cutoff = .6
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr1.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
cbind(
unlist(lapply(corr2.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr2.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
cutoff = .4
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr1.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
cbind(
unlist(lapply(corr2.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr2.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
sapply(out.df.list, function(x) x[, auc(y,yhat)])
sapply(corr1.list, function(x) auc(x[,1],x[,2]))
sapply(corr2.list, function(x) auc(x[,1],x[,2]))
?spatialBlock
# sbl = spatialBlock(st_as_sf(demo_pt), species = "Y", rows=10,cols=5)
sbl = spatialBlock(st_as_sf(demo_pt), species = "Y",
theRange=12000, blocks=SpatialPolygons(demo_cma3))
class(demo_cma3@polygons)
# sbl = spatialBlock(st_as_sf(demo_pt), species = "Y", rows=10,cols=5)
sbl = spatialBlock(st_as_sf(demo_pt), species = "Y",
theRange=12000, blocks=demo_cma3@polygons)
# sbl = spatialBlock(st_as_sf(demo_pt), species = "Y", rows=10,cols=5)
sbl = spatialBlock(st_as_sf(demo_pt), species = "Y",
theRange=12000, blocks=st_as_sf(demo_cma3))
kmax
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("data.table","tidyverse","stringr","rebus",
"udpipe","httr","magrittr","parallel","tabulizer")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
install.packages("rebus")
install.packages("udpipe")
install.packages("tabulizer")
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("data.table","tidyverse","stringr","rebus",
"udpipe","httr","magrittr","parallel","tabulizer")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
install.packages("tabulizer")
library(tabulizer)
install.packages("yaml")
library(yaml)
yobj = read_yaml("http://proceedings.mlr.press/v86/citeproc.yaml")
yobj = yaml.load_file("http://proceedings.mlr.press/v86/citeproc.yaml")
yobj
length(yobj)
yobj[[1]]
names(yobj)
names(yobj[[1]])
sapply(yobj, function(x) x$title)
sapply(yobj, function(x) with(x, c(id,title)))
lapply(yobj, function(x) with(x, c(id,title)))
matrix(sapply(yobj, function(x) with(x, c(id,title)))
,ncol=2,byrow=T)
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("yaml")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
title_list = vector("list",116)
pb = txtProgressBar(0,116)
for(i in 1:116){
cat("Doing f")
yobj = yaml.load_file(paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml"))
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("yaml")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
title_list = vector("list",116)
pb = txtProgressBar(0,116)
for(i in 1:116){
yobj = yaml.load_file(paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml"))
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
close(pb)
i
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
url.exists(ilink)
install.packages("RCurl")
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("yaml","RCurl")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
url.exists(ilink)
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("yaml","RCurl")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
title_list = vector("list",116)
pb = txtProgressBar(0,116)
for(i in 1:116){
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yobj = yaml.load_file(ilink)
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
}
close(pb)
yobj = yaml.load_file(ilink,fileEncoding = "UTF-8")
read_yaml(ilink,fileEncoding = "UTF-8")
for(i in 72:116){# error in 71
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yobj = yaml.load_file(ilink,fileEncoding = "UTF-8")
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
}
for(i in 72:116){ # error at 71
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ifile)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 72:116){ # error at 71
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 90:116){ # error at 71, 89
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 90:116){ # error at 71, 89, 96
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 97:116){ # error at 71, 89, 96
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 97:116){ # error at 71, 89, 96, 97
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
install.packages("bibtex")
ilink = paste0("http://proceedings.mlr.press/v",i,"/bibliography.bib")
ibib = bibtex::read.bib(ilink)
ilink
i = 71
ilink = paste0("http://proceedings.mlr.press/v",i,"/bibliography.bib")
ibib = bibtex::read.bib(ilink)
getwd()
system(paste0("wget ",ilink))
list.files()
ibib = bibtex::read.bib("bibliography.bib")
names(all_titles) = c("id","title")
library(rgdal)
ny = readOGR("c:/Users/subho/Downloads/pokemon_go_map.geojson")
clasS(ny)
class(ny)
names(ny)
ny@data[,1]
ny@data[1,]
plot(y)
plot(ny)
plot(ny, pch=19, cex=.5)
ny = readOGR("c:/Users/subho/Downloads/CTA_ParkandRide.shp")
ny@data[1,]
ny@data[2,]
plot(ny)
ny = readOGR("c:/Users/subho/Downloads/Divvy_Bicycle_Stations_all_Map.csv")
chi = fread("c:/Users/subho/Downloads/Divvy_Bicycle_Stations_all_Map.csv")
library(data.table)
chi = fread("c:/Users/subho/Downloads/Divvy_Bicycle_Stations_all_Map.csv")
chi[1]
coordinates(chi) = c("Longitude","LAtitude")
coordinates(chi) = c("Longitude","Latitude")
plot(chi)
plot(chi, pch=19)
plot(chi, pch=19, cex=.5)
# initial work
rm(list=ls())
# setwd("/n/subho-data/JMMLE-outputs/real-data")
setwd("C:/Study/Stratified-mult-GGM/Real data/")
Required.Packages <- c("data.table", "glmnet","glasso","parallel")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
source('jsem.R')
source('Generator.R')
source('l1LS_Main.R')
source('Objval.R')
source('JMLE.R')
## load data ***********************************************************
# **********************************************************************
data = readRDS("processed_data.rds")
final_model = readRDS("final_model.rds")
final_model_sep = readRDS("final_model_sep.rds")
model_list_sep = readRDS("model_list_sep.rds")
n = sapply(data$X.list1, nrow)
p = ncol(data$X.list1[[1]])
q = ncol(data$Y.list1[[1]])
K = 2
n
