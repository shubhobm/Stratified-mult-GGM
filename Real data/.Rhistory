lapply(out.df.list, function(x)
x[,sensitivity(as.factor(y),as.factor(yhat)>.2,positive = "TRUE")])
lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat)>.2,positive = "TRUE"))
out.df.list[1]
?sensitivity
lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>.2),positive = "TRUE"))
lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>.2),negative="FALSE"))
lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>.18),positive ="TRUE"))
lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>.18),negative="FALSE"))
lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>.25),positive ="TRUE"))
lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>.25),negative="FALSE"))
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>.2),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>.2),negative="FALSE")))
)
cutoff = .15
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cutoff = .25
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cutoff = .3
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cutoff = .4
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cutoff = .5
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cutoff = .6
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cutoff = .5
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(x[,2]>cutoff),positive ="TRUE"))),
unlist(lapply(corr1.list, function(x)
specificity(as.factor(x[,1]),as.factor(x[,2]>cutoff),negative="FALSE")))
)
corr1.list[1]
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(x[,2]>cutoff),positive ="1"))),
unlist(lapply(corr1.list, function(x)
specificity(as.factor(x[,1]),as.factor(x[,2]>cutoff),negative="0")))
)
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.numeric(x[,1]),as.numeric(x[,2]>cutoff),positive ="1"))),
unlist(lapply(corr1.list, function(x)
specificity(as.numeric(x[,1]),as.numeric(x[,2]>cutoff),negative="0")))
)
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr1.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cbind(
unlist(lapply(corr2.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr2.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
cutoff = .6
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr1.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
cbind(
unlist(lapply(corr2.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr2.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
cutoff = .4
cbind(
unlist(lapply(out.df.list, function(x)
sensitivity(as.factor(x$y),as.factor(x$yhat>cutoff),positive ="TRUE"))),
unlist(lapply(out.df.list, function(x)
specificity(as.factor(x$y),as.factor(x$yhat>cutoff),negative="FALSE")))
)
cbind(
unlist(lapply(corr1.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr1.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
cbind(
unlist(lapply(corr2.list, function(x)
sensitivity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),positive ="1"))),
unlist(lapply(corr2.list, function(x)
specificity(as.factor(x[,1]),as.factor(as.numeric(x[,2]>cutoff)),negative="0")))
)
sapply(out.df.list, function(x) x[, auc(y,yhat)])
sapply(corr1.list, function(x) auc(x[,1],x[,2]))
sapply(corr2.list, function(x) auc(x[,1],x[,2]))
?spatialBlock
# sbl = spatialBlock(st_as_sf(demo_pt), species = "Y", rows=10,cols=5)
sbl = spatialBlock(st_as_sf(demo_pt), species = "Y",
theRange=12000, blocks=SpatialPolygons(demo_cma3))
class(demo_cma3@polygons)
# sbl = spatialBlock(st_as_sf(demo_pt), species = "Y", rows=10,cols=5)
sbl = spatialBlock(st_as_sf(demo_pt), species = "Y",
theRange=12000, blocks=demo_cma3@polygons)
# sbl = spatialBlock(st_as_sf(demo_pt), species = "Y", rows=10,cols=5)
sbl = spatialBlock(st_as_sf(demo_pt), species = "Y",
theRange=12000, blocks=st_as_sf(demo_cma3))
kmax
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("data.table","tidyverse","stringr","rebus",
"udpipe","httr","magrittr","parallel","tabulizer")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
install.packages("rebus")
install.packages("udpipe")
install.packages("tabulizer")
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("data.table","tidyverse","stringr","rebus",
"udpipe","httr","magrittr","parallel","tabulizer")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
install.packages("tabulizer")
library(tabulizer)
install.packages("yaml")
library(yaml)
yobj = read_yaml("http://proceedings.mlr.press/v86/citeproc.yaml")
yobj = yaml.load_file("http://proceedings.mlr.press/v86/citeproc.yaml")
yobj
length(yobj)
yobj[[1]]
names(yobj)
names(yobj[[1]])
sapply(yobj, function(x) x$title)
sapply(yobj, function(x) with(x, c(id,title)))
lapply(yobj, function(x) with(x, c(id,title)))
matrix(sapply(yobj, function(x) with(x, c(id,title)))
,ncol=2,byrow=T)
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("yaml")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
title_list = vector("list",116)
pb = txtProgressBar(0,116)
for(i in 1:116){
cat("Doing f")
yobj = yaml.load_file(paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml"))
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("yaml")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
title_list = vector("list",116)
pb = txtProgressBar(0,116)
for(i in 1:116){
yobj = yaml.load_file(paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml"))
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
close(pb)
i
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
url.exists(ilink)
install.packages("RCurl")
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("yaml","RCurl")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
url.exists(ilink)
# ----------------------------------------------------------------------
# load libraries
# ======================================================================
Required.Packages <- c("yaml","RCurl")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
title_list = vector("list",116)
pb = txtProgressBar(0,116)
for(i in 1:116){
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yobj = yaml.load_file(ilink)
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
}
close(pb)
yobj = yaml.load_file(ilink,fileEncoding = "UTF-8")
read_yaml(ilink,fileEncoding = "UTF-8")
for(i in 72:116){# error in 71
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yobj = yaml.load_file(ilink,fileEncoding = "UTF-8")
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
}
for(i in 72:116){ # error at 71
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ifile)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 72:116){ # error at 71
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 90:116){ # error at 71, 89
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 90:116){ # error at 71, 89, 96
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 97:116){ # error at 71, 89, 96
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
for(i in 97:116){ # error at 71, 89, 96, 97
ilink = paste0("http://proceedings.mlr.press/v",i,"/citeproc.yaml")
if(url.exists(ilink)){
yaml.load_file(ilink)
}
title_list[[i]] = matrix(sapply(yobj, function(x) with(x, c(id,title))),
ncol=2, byrow=TRUE)
setTxtProgressBar(pb,i)
}
install.packages("bibtex")
ilink = paste0("http://proceedings.mlr.press/v",i,"/bibliography.bib")
ibib = bibtex::read.bib(ilink)
ilink
i = 71
ilink = paste0("http://proceedings.mlr.press/v",i,"/bibliography.bib")
ibib = bibtex::read.bib(ilink)
getwd()
system(paste0("wget ",ilink))
list.files()
ibib = bibtex::read.bib("bibliography.bib")
names(all_titles) = c("id","title")
library(rgdal)
ny = readOGR("c:/Users/subho/Downloads/pokemon_go_map.geojson")
clasS(ny)
class(ny)
names(ny)
ny@data[,1]
ny@data[1,]
plot(y)
plot(ny)
plot(ny, pch=19, cex=.5)
ny = readOGR("c:/Users/subho/Downloads/CTA_ParkandRide.shp")
ny@data[1,]
ny@data[2,]
plot(ny)
ny = readOGR("c:/Users/subho/Downloads/Divvy_Bicycle_Stations_all_Map.csv")
chi = fread("c:/Users/subho/Downloads/Divvy_Bicycle_Stations_all_Map.csv")
library(data.table)
chi = fread("c:/Users/subho/Downloads/Divvy_Bicycle_Stations_all_Map.csv")
chi[1]
coordinates(chi) = c("Longitude","LAtitude")
coordinates(chi) = c("Longitude","Latitude")
plot(chi)
plot(chi, pch=19)
plot(chi, pch=19, cex=.5)
rm(list=ls())
setwd("C:/Study/Stratified-mult-GGM/Real data/")
library(data.table)
final_model = readRDS("final_model.rds")
# final_model = readRDS("model_list.rds")[[2]]
# load data
data = readRDS("C:/Study/Stratified-mult-GGM/Real data/processed_data.rds")
X.names = colnames(data$X.list1[[1]])
Y.names = colnames(data$Y.list1[[1]])
X.indices = X.layer$indices
Zeta.groups = X.layer$groups
gamma = sqrt(log(p)/n) * seq(1, 0.4, -0.1)
bic.jsem <- sel.lambda.jsem(do.call(rbind, X.list), do.call(rbind, X.list),
unlist(X.indices), unlist(X.indices),
Zeta.groups,lambda=gamma)
gamma.min = gamma[which.min(bic.jsem$BIC)]
jsem.model = JSEM(do.call(rbind, X.list), unlist(X.indices),
Zeta.groups, lambda=gamma.min)
Zeta_new.array = array(0, c(p,p,K))
for(k in 1:K){
Zeta_new.array[,,k] = jsem.model$Theta[[k]]
}
# initial work
rm(list=ls())
# setwd("/n/subho-data/JMMLE-outputs/real-data")
setwd("C:/Study/Stratified-mult-GGM/Real data/")
Required.Packages <- c("data.table", "glmnet","glasso","parallel")
sapply(Required.Packages, FUN = function(x) {suppressMessages(require(x, character.only = TRUE))})
source('jsem.R')
source('Generator.R')
source('l1LS_Main.R')
source('Objval.R')
source('JMLE.R')
## load data ***********************************************************
# **********************************************************************
data = readRDS("processed_data.rds")
final_model = readRDS("final_model.rds")
final_model_sep = readRDS("final_model_sep.rds")
model_list_sep = readRDS("model_list_sep.rds")
n = sapply(data$X.list1, nrow)
p = ncol(data$X.list1[[1]])
q = ncol(data$Y.list1[[1]])
K = 2
X.indices <- vector("list", K)
for (k in 1:K){
X.indices[[k]] <- rep(k, n[[k]])
}
# Zeta groups: group structure in X
Zeta.groups = vector("list", p)
Xg = data$Xg
for (i in 1:p){
Zeta.groups[[i]] = matrix(0, K, p)
for (k in 1:K){
Zeta.groups[[i]][k,] = match(Xg, unique(Xg))
}
Zeta.groups[[i]] = Zeta.groups[[i]][,-i]
}
gamma = sqrt(log(p)/min(n)) * seq(1, 0.4, -0.1)
X.list = data$X.list1
bic.jsem <- sel.lambda.jsem(do.call(rbind, X.list), do.call(rbind, X.list),
unlist(X.indices), unlist(X.indices),
Zeta.groups,lambda=gamma)
gamma.min = gamma[which.min(bic.jsem$BIC)]
jsem.model = JSEM(do.call(rbind, X.list), unlist(X.indices),
Zeta.groups, lambda=gamma.min)
Zeta_new.array = array(0, c(p,p,K))
for(k in 1:K){
Zeta_new.array[,,k] = jsem.model$Theta[[k]]
}
Om.values = vector("list",K)
for(k in 1:K){
non.zero.Om = which(jsem.model$Omega[[k]] != 0, arr.ind=T)
non.zero.Om = non.zero.Om[non.zero.Om[,1] < non.zero.Om[,2],] # just take lower triangle
Om.df = data.table(SampleGroup = groups[k],
RNASeq1 = X.names[non.zero.Om[,1]],
RNAseq2 = X.names[non.zero.Om[,2]])
invisible(Om.df[, Value := 0])
for(i in 1:nrow(Om.df)){
Om.df[i, Value := jsem.model$Omega[[k]][non.zero.Om[i,1],non.zero.Om[i,2]]]
}
Om.values[[k]] = Om.df[order(abs(Value), decreasing=T)]
}
Om.values
non.zero.Om = which(jsem.model$Omega[[k]] != 0, arr.ind=T)
non.zero.Om
jsem.model$Omega[[k]]
names(jsem.model)
if(is.null(jsem.model)){
Ahat = list()
for(k in 1:K){
Ahat[[k]] = matrix(0, q, q)
Ahat[[k]][which(abs(Theta_new.array[,,k])>eps, arr.ind=T)] = 1
diag(Ahat[[k]]) = 0
}
} else{
Ahat = jsem.model$Ahat
}
if(is.null(jsem.model)){
Ahat = list()
for(k in 1:K){
Ahat[[k]] = matrix(0, q, q)
Ahat[[k]][which(abs(Theta_new.array[,,k])>eps, arr.ind=T)] = 1
diag(Ahat[[k]]) = 0
}
} else{
Ahat = jsem.model$Ahat
}
Ahat[1:4,1:4]
dim(Ahat)
jsem.model$Ahat
Info = list()
for (k in 1:K){
Info[[k]] = zeroInd(Ahat[[k]], 1)$zeroArr
}
Theta_refit = multi.glasso(do.call(rbind, X.list), unlist(X.indices), jsem.model$lambda, Info)
Om.values = vector("list",K)
for(k in 1:K){
non.zero.Om = which(Theta_refit$Omega[[k]] != 0, arr.ind=T)
non.zero.Om = non.zero.Om[non.zero.Om[,1] < non.zero.Om[,2],] # just take lower triangle
Om.df = data.table(SampleGroup = groups[k],
RNASeq1 = X.names[non.zero.Om[,1]],
RNAseq2 = X.names[non.zero.Om[,2]])
invisible(Om.df[, Value := 0])
for(i in 1:nrow(Om.df)){
Om.df[i, Value := Theta_refit$Omega[[k]][non.zero.Om[i,1],non.zero.Om[i,2]]]
}
Om.values[[k]] = Om.df[order(abs(Value), decreasing=T)]
}
names(Theta_refit)
groups
Om.values = vector("list",K)
groups = c("ER+","ER-")
for(k in 1:K){
non.zero.Om = which(Theta_refit$Omega[[k]] != 0, arr.ind=T)
non.zero.Om = non.zero.Om[non.zero.Om[,1] < non.zero.Om[,2],] # just take lower triangle
Om.df = data.table(SampleGroup = groups[k],
RNASeq1 = X.names[non.zero.Om[,1]],
RNAseq2 = X.names[non.zero.Om[,2]])
invisible(Om.df[, Value := 0])
for(i in 1:nrow(Om.df)){
Om.df[i, Value := Theta_refit$Omega[[k]][non.zero.Om[i,1],non.zero.Om[i,2]]]
}
Om.values[[k]] = Om.df[order(abs(Value), decreasing=T)]
}
X.names = colnames(X.list[[1]])
for(k in 1:K){
non.zero.Om = which(Theta_refit$Omega[[k]] != 0, arr.ind=T)
non.zero.Om = non.zero.Om[non.zero.Om[,1] < non.zero.Om[,2],] # just take lower triangle
Om.df = data.table(SampleGroup = groups[k],
RNASeq1 = X.names[non.zero.Om[,1]],
RNAseq2 = X.names[non.zero.Om[,2]])
invisible(Om.df[, Value := 0])
for(i in 1:nrow(Om.df)){
Om.df[i, Value := Theta_refit$Omega[[k]][non.zero.Om[i,1],non.zero.Om[i,2]]]
}
Om.values[[k]] = Om.df[order(abs(Value), decreasing=T)]
}
Om.values
fwrite(rbindlist(Om.values), file="Omegax_values.csv", sep=",")
mean(rbindlist(Om.values)[,Value]>0)
mean(Om.values[[1]][,Value]>0)
mean(Om.values[[2]][,Value]>0)
