load("/Users/JLin/Dropbox/VAR_2015/RealData/Data/SP500_monthly.Rda")
ls()
head(SP500_monthly)
nrow(SP500_monthly)
SP_logr = diff(log(SP500_monthly[,2]))
install.packages("wavethresh")
library(wavethresh)
wy = wd(SP_logr)
S?wd
?wd
install.packages("rwt")
h = daubcqf(8);#
denoise.dwt(SP_logr, h, option = default.dwt.option)
require(rwt)
h = daubcqf(8);
denoise.dwt(SP_logr, h, option = default.dwt.option)
h
require(rwt)
h = daubcqf(6);
denoise.dwt(SP_logr, h, option = default.dwt.option)
dn = denoise.dwt(SP_logr, h$h.0)
?wavelet
?dwt
library(wavelet)
library(wavelets)
install.packages("wavelets")
require(wavelets)
?dwt
plot.ts(SP_logr)
test = dwt(SP_logr, n.level=4,filter="bl14", boundary="reflection",fast=FALSE)
test@W$W2[]=0;
lines(idwt(test),col=2)
test = dwt(SP_logr, n.level=4,filter="bl20", boundary="reflection",fast=FALSE);
test@W$W2[]=0;
lines(idwt(test),col=2)
test = dwt(SP_logr, n.level=4,filter="bl20", boundary="reflection",fast=FALSE);
test@W$W2[]=0;
lines(idwt(test),col=2)
plot.ts(SP_logr)
test = dwt(SP_logr, n.level=4,filter="bl14", boundary="reflection",fast=FALSE);
test@W$W2[]=0;
lines(idwt(test),col=2)
test = ksmooth(1:length(SP_logr),SP_logr,kernel="normal",bandwidth=0.5)
test
lines(test$y,col=2)
plot.ts(SP_logr)
lines(test$y,col=2)
test = ksmooth(1:length(SP_logr),SP_logr,kernel="normal",bandwidth=0.25)
lines(test$y,col=2)
plot.ts(SP_logr)
lines(test$y,col=2)
test = ksmooth(1:length(SP_logr),SP_logr,kernel="normal",bandwidth=0.10)
lines(test$y,col=2)
plot.ts(SP_logr)
lines(test$y,col=2)
test$y
getwd()
setwd(../../../..)
setwd("../../../..")
getwd()
write.table(SP_logr,file="data.txt")
plot.ts(SP_logr)
library(wmtsa)
install.packages("wmtsa")
library(wmtsa)
ws = wavShrink(SP_logr,"s8",n.level=3)
plot.ts(SP_logr)
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=3,thresh.func="adaptive",thresh.scale=0.1)
ws = wavShrink(SP_logr,"s8",n.level=3,thresh.fun="adaptive",thresh.scale=0.1)
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=3,thresh.fun="adaptive",thresh.scale=0.2)
lines(ws,col=4)
plot.ts(SP_logr)
ws = wavShrink(SP_logr,"s8",n.level=3,thresh.fun="adaptive",thresh.scale=0.5)
lines(ws,col=4)
ws = wavShrink(SP_logr,"s8",n.level=3,thresh.fun="adaptive",thresh.scale=0.5,noise.variance=0.0)
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=3,thresh.fun="universal",thresh.scale=0.5,noise.variance=0.0)
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=3,thresh.fun="universal",thresh.scale=0.25,noise.variance=0.0)
lines(ws,col=2)
plot.ts(SP_logr)
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=5,thresh.fun="universal",thresh.scale=0.3,noise.variance=0.0)
lines(ws,col=4)
ws = wavShrink(SP_logr,"s8",n.level=5,thresh.fun="universal",thresh.scale=0.3,noise.variance=0.0,shrink.fun="soft")
lines(ws,col=4)
plot.ts(SP_logr)
ws = wavShrink(SP_logr,"s8",n.level=5,thresh.fun="universal",thresh.scale=0.3,noise.variance=0.0,shrink.fun="soft")
ws = wavShrink(SP_logr,"s8",n.level=5,thresh.fun="universal",thresh.scale=0.25,noise.variance=0.0,shrink.fun="soft")
lines(ws,col=4)
ws = wavShrink(SP_logr,"s8",n.level=5,threshold=0.5,thresh.scale=0.25,noise.variance=0.0,shrink.fun="soft")
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=5,threshold=0.05,thresh.scale=0.25,noise.variance=0.0,shrink.fun="soft")
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=5,threshold=0.005,thresh.scale=0.25,noise.variance=0.0,shrink.fun="soft")
lines(ws,col=2)
plot.ts(SP_logr)
ws = wavShrink(SP_logr,"s8",n.level=5,threshold=0.008,thresh.scale=0.25,noise.variance=0.0,shrink.fun="soft")
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=5,threshold=0.008,thresh.scale=0.25,noise.variance=0.0,shrink.fun="mid")
lines(ws,col=4)
ws = wavShrink(SP_logr,"s8",n.level=5,threshold=0.008,thresh.scale=0.3,noise.variance=0.0,shrink.fun="mid")
plot.ts(SP_logr)
lines(ws,col=4)
ws = wavShrink(SP_logr,"s8",n.level=5,threshold=0.02,thresh.scale=0.3,noise.variance=0.0,shrink.fun="mid")
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=5,threshold=0.015,thresh.scale=0.3,noise.variance=0.0,shrink.fun="mid")
plot.ts(SP_logr)
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=5,threshold=0.01,thresh.scale=0.3,noise.variance=0.0,shrink.fun="soft",thresh.fun="adaptive")
plot.ts(SP_logr)
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=2,threshold=c(0.01,0.02),thresh.scale=0.3,noise.variance=0.0,shrink.fun="soft",thresh.fun="adaptive")
plot.ts(SP_logr)
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=2,threshold=c(0.01,0.01),thresh.scale=0.3,noise.variance=0.0,shrink.fun="soft",thresh.fun="adaptive")
lines(ws,col=4)
ws = wavShrink(SP_logr,"s8",n.level=2,threshold=c(0.02,0.01),thresh.scale=0.3,noise.variance=0.0,shrink.fun="soft",thresh.fun="adaptive")
plot.ts(SP_logr)
lines(ws,col=4)
ws = wavShrink(SP_logr,"s8",n.level=2,threshold=c(0.008,0.025),thresh.scale=0.3,noise.variance=0.0,shrink.fun="soft",thresh.fun="adaptive")
plot.ts(SP_logr)
lines(ws,col=4)
ws = wavShrink(SP_logr,"s8",n.level=2,threshold=c(0.008,0.025),thresh.scale=0.1,noise.variance=0.0,shrink.fun="soft",thresh.fun="adaptive")
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=2,threshold=c(0.008,0.05),shrink.fun="soft",thresh.fun="adaptive")
lines(ws,col=4)
ws = wavShrink(SP_logr,"s8",n.level=2,threshold=0.005,shrink.fun="soft",thresh.fun="adaptive")
lines(ws,col=2)
ws = wavShrink(SP_logr,"s8",n.level=2,threshold=0.008,shrink.fun="soft",thresh.fun="adaptive")
lines(ws,col=2)
test = dwt(SP_logr,n.level=3,filter="bl14",boundary="reflection")
test$W
test@W
test@W = lapply(test@W,function(x){return(ifelse(abs(x) > quantile(abs(x),0.95),0,x))}
)
inv = idwt(test$W)
inv = idwt(test@W)
test@W = lapply(test@W,function(x){return(ifelse(abs(x) > quantile(abs(x),0.95),0,x))});
test
inv = idwt(test)
plot.ts(SP_logr)
lines(inv)
lines(inv,col=2)
A = array(c(1,2,3,4),c(2,2));#
D = array(c(3,0,6,0),c(2,2));#
B = array(c(2,3,4,5),c(2,2));
A %*% D^2 %*% B;#
D %*% A %*% B %*% D
eigen(A%*%B)
eigen(A%*%D%*%B)
A
B
D
A = array(c(1,2,3,4),c(2,2));#
D = array(c(3,0,0,6),c(2,2));#
B = array(c(2,3,4,5),c(2,2));#
#
A %*% D^2 %*% B;#
D %*% A %*% B %*% D
D
eigen(A %*% B)
eigen(A %*%D %*% B)
D = array(c(1,0,0,2),c(2,2))
eigen(A %*%D %*% B)
R0 = array(rnorm(10*5),c(10,5)); R1 = array(rnorm(10*6),c(10,6));#
UDV = svd(R1);#
U = svd$u; D = diag(svd$d);#
#
t(R0) %*% R1
UDV = svd(R1);#
U = UDV$u; D = diag(UDV$d);
t(R0) %*% R1
t(R0) %*% U %*% D
U
D
range(c(1,3,5))
DEBUG = TRUE#
library(doMC)#
registerDoMC()#
options(cores=2)#
#
setwd("Desktop/Sparsity_SIM")#
source("Generator.R")#
source("mixMRF.R")#
source("Eval.R")#
#
set.seed(612);#
#
p1 = 30; p2 = 60; n = 100; #
#
## generate Theta matrix and B matrix #
B = RegMat(p1,p2); #
ThetaY.info = ThetaMat(p2); ThetaY = ThetaY.info$Theta; ThetaY_CN = ThetaY.info$CN_Theta;#
#
Fulldata = gen.2layer(n,B,ThetaY);#
X = Fulldata$X; Y = Fulldata$Y;#
lambda1.seq = seq(from=1,to=3,length=5)*sqrt(log(p1)/n);#
lambda2.seq = seq(from=0.1,to=1,length=5)*sqrt(log(p2)/n);#
#
EvalB = array(NA,c(length(lambda1.seq),length(lambda2.seq),3)); #
dimnames(EvalB)[[3]] = c("SEN","SPC","MCC");#
EvalThetaY = array(NA,c(length(lambda1.seq),length(lambda2.seq),3));#
dimnames(EvalThetaY)[[3]] = c("SEN","SPC","MCC");#
#
for (i in 1:length(lambda1.seq)){#
	for (j in 1:length(lambda2.seq)){#
		cat("i=",i,"j=",j,"\n")#
		result = mixMRF(X,Y,lambda1=lambda1.seq[i],lambda2=lambda2.seq[j],scaledLasso=FALSE,rule="or")#
		EvalB[i,j,] = as.numeric(Eval(B,result$B_calculated,directed=TRUE)[c(1,2,3)]);#
		EvalThetaY[i,j,] = as.numeric(Eval(ThetaY,result$ThetaY,directed=FALSE)[c(1,2,3)]);#
	}#
}#
EvalB;#
EvalThetaY;
p1 = 60; p2 = 30; n = 100; #
#
## generate Theta matrix and B matrix #
B = RegMat(p1,p2); #
ThetaY.info = ThetaMat(p2); ThetaY = ThetaY.info$Theta; ThetaY_CN = ThetaY.info$CN_Theta;#
#
Fulldata = gen.2layer(n,B,ThetaY);#
X = Fulldata$X; Y = Fulldata$Y;#
lambda1.seq = seq(from=1,to=3,length=5)*sqrt(log(p1)/n);#
lambda2.seq = seq(from=0.1,to=1,length=5)*sqrt(log(p2)/n);#
#
EvalB = array(NA,c(length(lambda1.seq),length(lambda2.seq),3)); #
dimnames(EvalB)[[3]] = c("SEN","SPC","MCC");#
EvalThetaY = array(NA,c(length(lambda1.seq),length(lambda2.seq),3));#
dimnames(EvalThetaY)[[3]] = c("SEN","SPC","MCC");#
#
for (i in 1:length(lambda1.seq)){#
	for (j in 1:length(lambda2.seq)){#
		cat("i=",i,"j=",j,"\n")#
		result = mixMRF(X,Y,lambda1=lambda1.seq[i],lambda2=lambda2.seq[j],scaledLasso=FALSE,rule="or")#
		EvalB[i,j,] = as.numeric(Eval(B,result$B_calculated,directed=TRUE)[c(1,2,3)]);#
		EvalThetaY[i,j,] = as.numeric(Eval(ThetaY,result$ThetaY,directed=FALSE)[c(1,2,3)]);#
	}#
}#
EvalB;
p1 = 200; p2 = 200; n = 150; #
#
## generate Theta matrix and B matrix #
B = RegMat(p1,p2); #
ThetaY.info = ThetaMat(p2); ThetaY = ThetaY.info$Theta; ThetaY_CN = ThetaY.info$CN_Theta;#
#
Fulldata = gen.2layer(n,B,ThetaY);#
X = Fulldata$X; Y = Fulldata$Y;#
lambda1.seq = seq(from=1,to=3,length=5)*sqrt(log(p1)/n);#
lambda2.seq = seq(from=0.1,to=1,length=5)*sqrt(log(p2)/n);#
#
EvalB = array(NA,c(length(lambda1.seq),length(lambda2.seq),3)); #
dimnames(EvalB)[[3]] = c("SEN","SPC","MCC");#
EvalThetaY = array(NA,c(length(lambda1.seq),length(lambda2.seq),3));#
dimnames(EvalThetaY)[[3]] = c("SEN","SPC","MCC");#
#
for (i in 1:length(lambda1.seq)){#
	for (j in 1:length(lambda2.seq)){#
		cat("i=",i,"j=",j,"\n")#
		result = mixMRF(X,Y,lambda1=lambda1.seq[i],lambda2=lambda2.seq[j],scaledLasso=FALSE,rule="or")#
		EvalB[i,j,] = as.numeric(Eval(B,result$B_calculated,directed=TRUE)[c(1,2,3)]);#
		EvalThetaY[i,j,] = as.numeric(Eval(ThetaY,result$ThetaY,directed=FALSE)[c(1,2,3)]);#
	}#
}#
EvalB;
