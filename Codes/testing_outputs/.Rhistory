## Tune JSEM model for X ***********************************************
# **********************************************************************
X.indices = X.layer$indices
Zeta.groups = X.layer$groups
gamma = sqrt(log(p)/n) * seq(1, 0.4, -0.1)
bic.jsem <- sel.lambda.jsem(do.call(rbind, X.list), do.call(rbind, X.list),
unlist(X.indices), unlist(X.indices),
Zeta.groups,lambda=gamma)
gamma.min = gamma[which.min(bic.jsem$BIC)]
jsem.model = JSEM(do.call(rbind, X.list), unlist(X.indices),
Zeta.groups, lambda=gamma.min)
Zeta_new.array = array(0, c(p,p,K))
for(k in 1:K){
Zeta_new.array[,,k] = jsem.model$Theta[[k]]
}
## Get debiased estimates **********************************************
# **********************************************************************
B.hat.array = jmmle.model$B.refit
C.hat.array = B.hat.array
M = matrix(0,p,K)
for(k in 1:K){
X.k = X.list[[k]]
E.k = Y.list[[k]] - X.k %*% B.hat.array[,,k]
for(i in 1:p){
R.ik = X.k[,i] - X.k[,-i] %*% Zeta_new.array[i,-i,k]
t.ik = as.numeric(t(R.ik) %*% X.k[,i]/n)
C.hat.array[i,,k] = B.hat.array[i,,k] + t(R.ik) %*% E.k/n/t.ik
M[i,k] = sqrt(n)*t.ik/sqrt(sum(R.ik^2/n))
}
}
## Get eigenvectors and eigenvalues of precision matrices
Theta1 = solve(jmmle.model$Theta_refit$Omega[[1]])
Theta2 = solve(jmmle.model$Theta_refit$Omega[[2]])
## Global test statistics for i-th X-variable
D = rep(0,p)
d = matrix(0,p,q)
for(i in 1:p){
Pooled.Cov.i = Theta1/M[i,1]^2 + Theta2/M[i,2]^2
Diff.i = C.hat.array[i,,1] - C.hat.array[i,,2]
## pairwise test statistics
d[i,] = (Diff.i)^2/diag(Pooled.Cov.i)
## overall test statistic
D[i] = t(Diff.i) %*% solve(Pooled.Cov.i) %*% Diff.i
}
## determine threshold for i-th test
alpha = .2
d.ind.mat = matrix(0,p,q)
tau = rep(NA,p)
which.i.reject = which(D > qchisq(.95, q))
for(i in which.i.reject){
tau.vec = seq(0, 20, length.out=1e2)
thres.vec = as.numeric(lapply(tau.vec, function(x) alpha/q * max(sum(d[i,]>x),1)))
tau[i] = tau.vec[which.min(abs(1 - pchisq(tau.vec,1) - thres.vec))]
d.ind.mat[i,] = as.numeric(d[i,]>tau[i])
}
pow.simul = length(which.i.reject)/p
pow = sum(d.ind.mat == 1 & Diff.mat != 0, na.rm=T)/sum(Diff.mat != 0)
size = 1 - sum(d.ind.mat == 0 & Diff.mat == 0, na.rm=T)/sum(Diff.mat == 0)
FDP = sum(d.ind.mat == 1 & Diff.mat == 0, na.rm=T)/max(sum(d.ind.mat == 1, na.rm=T),1)
c(pow.simul,pow,size,FDP)
}
out.mat = mclapply(1:nrep, loopfun, mc.cores=8)
# out.mat = lapply(1:nrep, loopfun)
if(is.null(filename)){
filename = paste0("testnew_n",n,"p",p,"q",q,".Rda")
}
save(out.mat, file=filename)
}
get.outputs(n = 100, subnetSize.X = c(30, 30), subnetSize.E = c(15, 15), nrep=8)
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n100p60q30.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n100p30q60.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n150p60q30.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n150p30q60.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n200p60q30.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n200p30q60.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
out.mat
## determine threshold for i-th test
alpha = .2
d.ind.mat = matrix(0,p,q)
tau = rep(20,p)
which.i.reject = which(D > qchisq(.95, q))
for(i in which.i.reject){
tau.vec = seq(0, 20, length.out=1e2)
thres.vec = as.numeric(lapply(tau.vec, function(x) alpha/q * max(sum(d[i,]>x),1)))
which.less = which(1 - pchisq(tau.vec,1) <= thres.vec)
if(length(which.less)>0){
tau[i] = tau.vec[which.less[1]] # set tau as minimizer only if there is at least one tau entry less
}
d.ind.mat[i,] = as.numeric(d[i,]>tau[i])
}
pow.simul = length(which.i.reject)/p
pow = sum(d.ind.mat == 1 & Diff.mat != 0, na.rm=T)/sum(Diff.mat != 0)
size = 1 - sum(d.ind.mat == 0 & Diff.mat == 0, na.rm=T)/sum(Diff.mat == 0)
FDP = sum(d.ind.mat == 1 & Diff.mat == 0, na.rm=T)/max(sum(d.ind.mat == 1, na.rm=T),1)
c(pow.simul,pow,size,FDP)
alpha = .2
d.ind.mat = matrix(0,p,q)
tau = rep(20,p)
which.i.reject = which(D > qchisq(.95, q))
for(i in which.i.reject){
tau.vec = seq(0, 20, length.out=1e2)
thres.vec = as.numeric(lapply(tau.vec, function(x) alpha/q * max(sum(d[i,]>x),1)))
# which.less = which(1 - pchisq(tau.vec,1) <= thres.vec)
# if(length(which.less)>0){
#   tau[i] = tau.vec[which.less[1]] # set tau as minimizer only if there is at least one tau entry less
# }
tau[i] = tau.vec[which.min(abs(1 - pchisq(tau.vec,1) - thres.vec))]
d.ind.mat[i,] = as.numeric(d[i,]>tau[i])
}
pow.simul = length(which.i.reject)/p
pow = sum(d.ind.mat == 1 & Diff.mat != 0, na.rm=T)/sum(Diff.mat != 0)
size = 1 - sum(d.ind.mat == 0 & Diff.mat == 0, na.rm=T)/sum(Diff.mat == 0)
FDP = sum(d.ind.mat == 1 & Diff.mat == 0, na.rm=T)/max(sum(d.ind.mat == 1, na.rm=T),1)
c(pow.simul,pow,size,FDP)
tau[i]
alpha = .2
d.ind.mat = matrix(0,p,q)
tau = rep(20,p)
which.i.reject = which(D > qchisq(.95, q))
for(i in which.i.reject){
tau.vec = seq(0, 20, length.out=1e2)
thres.vec = as.numeric(lapply(tau.vec, function(x) alpha/q * max(sum(d[i,]>x),1)))
which.less = which(1 - pchisq(tau.vec,1) <= thres.vec)
if(length(which.less)>0){
tau[i] = tau.vec[which.less[1]] # set tau as minimizer only if there is at least one tau entry less
}
# tau[i] = tau.vec[which.min(abs(1 - pchisq(tau.vec,1) - thres.vec))]
d.ind.mat[i,] = as.numeric(d[i,]>tau[i])
}
pow.simul = length(which.i.reject)/p
pow = sum(d.ind.mat == 1 & Diff.mat != 0, na.rm=T)/sum(Diff.mat != 0)
size = 1 - sum(d.ind.mat == 0 & Diff.mat == 0, na.rm=T)/sum(Diff.mat == 0)
FDP = sum(d.ind.mat == 1 & Diff.mat == 0, na.rm=T)/max(sum(d.ind.mat == 1, na.rm=T),1)
c(pow.simul,pow,size,FDP)
tau[i]
tau
alpha = .2
d.ind.mat = matrix(0,p,q)
tau = rep(20,p)
which.i.reject = which(D > qchisq(.95, q))
for(i in which.i.reject){
tau.vec = seq(0, 20, length.out=1e2)
thres.vec = as.numeric(lapply(tau.vec, function(x) alpha/q * max(sum(d[i,]>x),1)))
# which.less = which(1 - pchisq(tau.vec,1) <= thres.vec)
# if(length(which.less)>0){
#   tau[i] = tau.vec[which.less[1]] # set tau as minimizer only if there is at least one tau entry less
# }
tau[i] = tau.vec[which.min(abs(1 - pchisq(tau.vec,1) - thres.vec))]
d.ind.mat[i,] = as.numeric(d[i,]>tau[i])
}
pow.simul = length(which.i.reject)/p
pow = sum(d.ind.mat == 1 & Diff.mat != 0, na.rm=T)/sum(Diff.mat != 0)
size = 1 - sum(d.ind.mat == 0 & Diff.mat == 0, na.rm=T)/sum(Diff.mat == 0)
FDP = sum(d.ind.mat == 1 & Diff.mat == 0, na.rm=T)/max(sum(d.ind.mat == 1, na.rm=T),1)
c(pow.simul,pow,size,FDP)
tau
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n100p60q30.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n100p30q60.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
alpha = .2
d.ind.mat = matrix(0,p,q)
tau = rep(20,p)
which.i.reject = which(D > qchisq(.95, q))
for(i in which.i.reject){
tau.vec = seq(0, 20, length.out=1e2)
thres.vec = as.numeric(lapply(tau.vec, function(x) alpha/q * max(sum(d[i,]>x),1)))
which.less = which((1 - pchisq(tau.vec,1)) <= thres.vec)
if(length(which.less)>0){
tau[i] = tau.vec[which.less[1]] # set tau as minimizer only if there is at least one tau entry less
}
# tau[i] = tau.vec[which.min(abs(1 - pchisq(tau.vec,1) - thres.vec))]
d.ind.mat[i,] = as.numeric(d[i,]>tau[i])
}
pow.simul = length(which.i.reject)/p
pow = sum(d.ind.mat == 1 & Diff.mat != 0, na.rm=T)/sum(Diff.mat != 0)
size = 1 - sum(d.ind.mat == 0 & Diff.mat == 0, na.rm=T)/sum(Diff.mat == 0)
FDP = sum(d.ind.mat == 1 & Diff.mat == 0, na.rm=T)/max(sum(d.ind.mat == 1, na.rm=T),1)
c(pow.simul,pow,size,FDP)
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n100p30q60.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/outtestsizenew_n100p200q200modelB_4.Rda")
out/mat
out.mat
load("D:/Study/My projects/Stratified-mult-GGM/Codes/out_n150p200q200k5_1step.Rda")
out.mat
eval.list
load("D:/Study/My projects/Stratified-mult-GGM/Codes/outtestsizenew_n100p200q200modelB_1.Rda")
out.mat
load("D:/Study/My projects/Stratified-mult-GGM/Codes/outtestsizenew_n100p200q200modelB_2.Rda")
out.mat
a = 1:5
a[5] = NA
which.min(a)
a
seq(1, 0.4, -0.1)+
seq(1, 0.4, -0.1)
load("D:/Study/My projects/Stratified-mult-GGM/Codes/outtestsizenew_n100p200q200modelB_3.Rda")
out.mat
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n150p200q200.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n100p30q60.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n100p60q30.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/outtestsizenew_n150p200q200.Rda")
mean(out.mat)
out.mat
mean(as.numeric(out.mat))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/outtestsizenew_n100p30q60.Rda")
mean(as.numeric(out.mat))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/outtestsizenew_n100p60q30.Rda")
mean(as.numeric(out.mat))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testnew_n100p200q200modelB.Rda")
out.mat
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/outtestsizenew_n200p200q200modelB_1.Rda")
as.numeric(out.mat)
mean(as.numeric(out.mat)
)
load("D:/Study/My projects/Stratified-mult-GGM/Codes/outtestsizenew_n100p30q60_1.Rda")
as.numeric(out.mat)
load("D:/Study/My projects/Stratified-mult-GGM/Codes/outtestsizenew_n100p30q60.Rda")
as.numeric(out.mat)
mean(as.numeric(out.mat)
)
seq(2, 0.4, -0.2)
length(seq(2, 0.4, -0.2))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/outtestsizenew_n150p200q200_1.Rda")
mean(as.numeric(out.mat))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/outtestsizenew_n150p200q200_1.Rda")
mean(as.numeric(out.mat))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/outtestsizenew_n150p200q200_2.Rda")
mean(as.numeric(out.mat))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/testnew_n200p200q200modelB.Rda")
out.mat
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/testnew_n150p200q200.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/testnew_n200p200q200modelB.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
seq(1.8, 0.4, -0.2)
load("C:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/testnew_n200p60q30_1.Rda")
out.mat
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
load("C:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/testnew_n200p30q60_1.Rda")
out.mat = matrix(unlist(out.mat), ncol=4, byrow=T)
rbind(round(apply(out.mat,2,mean),3),
round(apply(out.mat,2,sd),3))
rm(list=ls())
setwd('d:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/')
analyze = function(list, broken=FALSE){
matrix.list = list()
if(broken){
for(i in 1:4){
load(paste0(list,"_",i,".Rda"))
matrix.list[[i]] = matrix(unlist(out.mat), ncol=4, byrow=T)
matrix = lapply(matrix.list, rbind)
}
} else{
load(paste0(list,".Rda"))
matrix = matrix(unlist(out.mat), ncol=4, byrow=T)
}
rbind(round(apply(matrix,2,mean),3),
round(apply(matrix,2,sd),3))
}
analyze.size = function(list, broken=FALSE){
vec.list = list()
if(broken){
for(i in 1:4){
load(paste0(list,"_",i,".Rda"))
vec.list[[i]] = as.numeric(unlist(out.mat))
vector = as.numeric(unlist(vec.list))
}
} else{
load(paste0(list,".Rda"))
vector = as.numeric(unlist(out.mat))
}
c(round(mean(vector),3), round(sd(vector),3))
}
setwd('c:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/')
analyze("testnew_n100p60q30")
analyze("testnew_n200p60q30")
analyze("testnew_n200p60q30", broken=T)
load("C:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/testnew_n200p60q30_3.Rda")
out.mat
analyze("testnew_n200p60q30_1", broken=F)
analyze("testnew_n200p60q30_2", broken=F)
analyze("testnew_n200p60q30_3", broken=F)
analyze("testnew_n200p60q30_4", broken=F)
analyze("testnew_n200p60q30_5", broken=F)
analyze("testnew_n200p60q30", broken=T)
analyze = function(list, broken=FALSE, array=NULL){
matrix.list = list()
if(broken){
for(i in array){
load(paste0(list,"_",i,".Rda"))
matrix.list[[i]] = matrix(unlist(out.mat), ncol=4, byrow=T)
matrix = lapply(matrix.list, rbind)
}
} else{
load(paste0(list,".Rda"))
matrix = matrix(unlist(out.mat), ncol=4, byrow=T)
}
rbind(round(apply(matrix,2,mean),3),
round(apply(matrix,2,sd),3))
}
analyze.size = function(list, broken=FALSE){
vec.list = list()
if(broken){
for(i in 1:4){
load(paste0(list,"_",i,".Rda"))
vec.list[[i]] = as.numeric(unlist(out.mat))
vector = as.numeric(unlist(vec.list))
}
} else{
load(paste0(list,".Rda"))
vector = as.numeric(unlist(out.mat))
}
c(round(mean(vector),3), round(sd(vector),3))
}
analyze("testnew_n200p60q30", broken=T, array=1:5)
list="testnew_n200p60q30"
array=1:5
for(i in array){
load(paste0(list,"_",i,".Rda"))
matrix.list[[i]] = matrix(unlist(out.mat), ncol=4, byrow=T)
matrix = lapply(matrix.list, rbind)
}
matrix.list = list()
for(i in array){
load(paste0(list,"_",i,".Rda"))
matrix.list[[i]] = matrix(unlist(out.mat), ncol=4, byrow=T)
matrix = lapply(matrix.list, rbind)
}
rbind(round(apply(matrix,2,mean),3),
round(apply(matrix,2,sd),3))
matrix
matrix.list
matrix = matrix(unlist(matrix.list), ncol=4, byrow=T)
matrix
simplify2array(matrix.list, 1:2, mean)
apply(simplify2array(matrix.list), 1:2, mean))
apply(simplify2array(matrix.list), 1:2, mean)
apply(simplify2array(matrix.list), 2:3, mean)
apply(simplify2array(matrix.list), 3, mean)
apply(simplify2array(matrix.list), 2, mean)
analyze = function(list, broken=FALSE, array=NULL){
matrix.list = list()
if(broken){
for(i in array){
load(paste0(list,"_",i,".Rda"))
matrix.list[[i]] = matrix(unlist(out.mat), ncol=4, byrow=T)
matrix = matrix(unlist(matrix.list), ncol=4, byrow=T)
output = c(round(apply(simplify2array(matrix.list), 2, mean),3),
round(apply(simplify2array(matrix.list), 2, sd),3))
}
} else{
load(paste0(list,".Rda"))
matrix = matrix(unlist(out.mat), ncol=4, byrow=T)
output =   rbind(round(apply(matrix,2,mean),3),
round(apply(matrix,2,sd),3))
}
output
}
analyze("testnew_n200p60q30", broken=T, array=1:5)
analyze = function(list, broken=FALSE, array=NULL){
matrix.list = list()
if(broken){
for(i in array){
load(paste0(list,"_",i,".Rda"))
matrix.list[[i]] = matrix(unlist(out.mat), ncol=4, byrow=T)
matrix = matrix(unlist(matrix.list), ncol=4, byrow=T)
output = rbind(round(apply(simplify2array(matrix.list), 2, mean),3),
round(apply(simplify2array(matrix.list), 2, sd),3))
}
} else{
load(paste0(list,".Rda"))
matrix = matrix(unlist(out.mat), ncol=4, byrow=T)
output =   rbind(round(apply(matrix,2,mean),3),
round(apply(matrix,2,sd),3))
}
output
}
analyze("testnew_n200p60q30", broken=T, array=1:5)
analyze("testnew_n200p30q60", broken=T, array=1:5)
analyze("testnew_n100p30q60")
analyze("testnew_n100p60q30")
setwd('d:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/')
rm(list=ls())
setwd('d:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/')
analyze = function(list, broken=FALSE, array=NULL){
matrix.list = list()
if(broken){
for(i in array){
load(paste0(list,"_",i,".Rda"))
matrix.list[[i]] = matrix(unlist(out.mat), ncol=4, byrow=T)
matrix = matrix(unlist(matrix.list), ncol=4, byrow=T)
output = rbind(round(apply(simplify2array(matrix.list), 2, mean),3),
round(apply(simplify2array(matrix.list), 2, sd),3))
}
} else{
load(paste0(list,".Rda"))
matrix = matrix(unlist(out.mat), ncol=4, byrow=T)
output =   rbind(round(apply(matrix,2,mean),3),
round(apply(matrix,2,sd),3))
}
output
}
analyze.size = function(list, broken=FALSE){
vec.list = list()
if(broken){
for(i in 1:4){
load(paste0(list,"_",i,".Rda"))
vec.list[[i]] = as.numeric(unlist(out.mat))
vector = as.numeric(unlist(vec.list))
}
} else{
load(paste0(list,".Rda"))
vector = as.numeric(unlist(out.mat))
}
c(round(mean(vector),3), round(sd(vector),3))
}
analyze("testnew_n300p300q300", broken=T, array=1:5)
analyze("testnew_n300p300q200modelB", broken=T, array=1:5)
analyze("testnew_n300p200q200modelB", broken=T, array=1:5)
analyze("testnew_n200p200q200modelB")
analyze("testnew_n100p200q200modelB")
analyze("testnew_n300p300q300", broken=T, array=1:5)
analyze("testnew_n150p300q300")
analyze("testnew_n200p60q30", broken=T, array=1:5)
rm(list=ls())
setwd('d:/Study/My projects/Stratified-mult-GGM/Codes/testing_outputs/')
analyze = function(list, broken=FALSE, array=NULL){
matrix.list = list()
if(broken){
for(i in array){
load(paste0(list,"_",i,".Rda"))
matrix.list[[i]] = matrix(unlist(out.mat), ncol=4, byrow=T)
matrix = matrix(unlist(matrix.list), ncol=4, byrow=T)
output = rbind(round(apply(simplify2array(matrix.list), 2, mean),3),
round(apply(simplify2array(matrix.list), 2, sd),3))
}
} else{
load(paste0(list,".Rda"))
matrix = matrix(unlist(out.mat), ncol=4, byrow=T)
output =   rbind(round(apply(matrix,2,mean),3),
round(apply(matrix,2,sd),3))
}
output
}
analyze.size = function(list, broken=FALSE){
vec.list = list()
if(broken){
for(i in 1:4){
load(paste0(list,"_",i,".Rda"))
vec.list[[i]] = as.numeric(unlist(out.mat))
vector = as.numeric(unlist(vec.list))
}
} else{
load(paste0(list,".Rda"))
vector = as.numeric(unlist(out.mat))
}
c(round(mean(vector),3), round(sd(vector),3))
}
analyze("testnew_n200p60q30", broken=T, array=1:5)
analyze("testnew_n200p30q60", broken=T, array=1:5)
analyze("testnew_n300p300q300", broken=T, array=1:5)
analyze("testnew_n300p200q200modelB", broken=T, array=1:5)
