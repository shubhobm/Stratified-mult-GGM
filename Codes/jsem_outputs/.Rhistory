library(huge)
?huge
n=100
subnetSize.X = c(30, 30)
subnetSize.E = c(15, 15)
sparsity.B=5
sparsity.Theta=5
K=5
rep=1
## Set up some quantities
group = matrix(c(1, 2), nrow=2, ncol=2, byrow=T)           # grouping pattern
p = sum(subnetSize.X)
q = sum(subnetSize.E)
set.seed(1e3*rep)
## Generate data *******************************************************
# **********************************************************************
X.layer = GenerateLayer(n, subnetSize.X, group, D=1, sparsity=sparsity.Theta/p)
E.layer = GenerateLayer(n, subnetSize.E, group, D=1, sparsity=sparsity.Theta/q)
## generate group structure for coef array
B0.group.array = array(0, c(p,q,K))
g = 1
for(i in 1:p){
for(j in 1:q){
B0.group.array[i,j,] = g
g = g+1
}
}
B0.array = CoefArray2(B0.group.array[,,1], D=1, sparsity=sparsity.B/p)
B0.array = B0.array[[1]]
Diff.mat = B0.array[,,1] - B0.array[,,2]
Theta0.array = array(0, c(q,q,K))
for(k in 1:K){
Theta0.array[,,k] = with(E.layer,
diag(diag(Omega[[k]])^(-0.5)) %*% Omega[[k]] %*% diag(diag(Omega[[k]])^(-0.5)))
}
## make Y-layer
Y.layer = E.layer
for(k in 1:K){
Y.layer$data[[k]] = X.layer$data[[k]] %*% B0.array[,,k] + E.layer$data[[k]]
}
##### Given: X.list, Y.list, B.groups, Theta.groups
Y.list = lapply(Y.layer$data, as.matrix)
Y.indices = Y.layer$indices
Theta.groups = Y.layer$groups
X.list = lapply(X.layer$data, as.matrix)
Theta.group.array = array(0, c(q,q,K))
for(j in 1:q){
Theta.group.array[j,-j,] = Y.layer$groups[[j]]
}
setwd('d:/Study/My projects/Stratified-mult-GGM/Codes')
source('jsem.R')
source('Generator.R')
source('l1LS_Main.R')
source('Objval.R')
source('JMLE.R')
set.seed(1e3*rep)
## Generate data *******************************************************
# **********************************************************************
X.layer = GenerateLayer(n, subnetSize.X, group, D=1, sparsity=sparsity.Theta/p)
E.layer = GenerateLayer(n, subnetSize.E, group, D=1, sparsity=sparsity.Theta/q)
## generate group structure for coef array
B0.group.array = array(0, c(p,q,K))
g = 1
for(i in 1:p){
for(j in 1:q){
B0.group.array[i,j,] = g
g = g+1
}
}
B0.array = CoefArray2(B0.group.array[,,1], D=1, sparsity=sparsity.B/p)
B0.array = B0.array[[1]]
Diff.mat = B0.array[,,1] - B0.array[,,2]
Theta0.array = array(0, c(q,q,K))
for(k in 1:K){
Theta0.array[,,k] = with(E.layer,
diag(diag(Omega[[k]])^(-0.5)) %*% Omega[[k]] %*% diag(diag(Omega[[k]])^(-0.5)))
}
## make Y-layer
Y.layer = E.layer
for(k in 1:K){
Y.layer$data[[k]] = X.layer$data[[k]] %*% B0.array[,,k] + E.layer$data[[k]]
}
##### Given: X.list, Y.list, B.groups, Theta.groups
Y.list = lapply(Y.layer$data, as.matrix)
Y.indices = Y.layer$indices
Theta.groups = Y.layer$groups
X.list = lapply(X.layer$data, as.matrix)
Theta.group.array = array(0, c(q,q,K))
for(j in 1:q){
Theta.group.array[j,-j,] = Y.layer$groups[[j]]
}
k
X.layer = GenerateLayer(n, subnetSize.X, group, D=1, sparsity=sparsity.Theta/p)
E.layer = GenerateLayer(n, subnetSize.E, group, D=1, sparsity=sparsity.Theta/q)
## generate group structure for coef array
B0.group.array = array(0, c(p,q,K))
g = 1
for(i in 1:p){
for(j in 1:q){
B0.group.array[i,j,] = g
g = g+1
}
}
B0.array = CoefArray(B0.group.array)
Theta0.array = array(0, c(q,q,K))
for(k in 1:K){
Theta0.array[,,k] = with(E.layer,
diag(diag(Omega[[k]])^(-0.5)) %*% Omega[[k]] %*% diag(diag(Omega[[k]])^(-0.5)))
}
## make Y-layer
Y.layer = E.layer
for(k in 1:K){
Y.layer$data[[k]] = X.layer$data[[k]] %*% B0.array[,,k] + E.layer$data[[k]]
}
##### Given: X.list, Y.list, B.groups, Theta.groups
Y.list = lapply(Y.layer$data, as.matrix)
Y.indices = Y.layer$indices
Theta.groups = Y.layer$groups
X.list = lapply(X.layer$data, as.matrix)
Theta.group.array = array(0, c(q,q,K))
for(j in 1:q){
Theta.group.array[j,-j,] = Y.layer$groups[[j]]
}
k
K
X.layer = GenerateLayer(n, subnetSize.X, group, D=1, sparsity=sparsity.Theta/p)
E.layer = GenerateLayer(n, subnetSize.E, group, D=1, sparsity=sparsity.Theta/q)
B0.group.array = array(0, c(p,q,K))
g = 1
for(i in 1:p){
for(j in 1:q){
B0.group.array[i,j,] = g
g = g+1
}
}
B0.array = CoefArray(B0.group.array)
Theta0.array = array(0, c(q,q,K))
for(k in 1:K){
Theta0.array[,,k] = with(E.layer,
diag(diag(Omega[[k]])^(-0.5)) %*% Omega[[k]] %*% diag(diag(Omega[[k]])^(-0.5)))
}
K
length(E.layer$Omega
0
length(E.layer$Omega)
group = rbind(
c(1, 2),
c(1, 4),
c(3, 2),
c(3, 4),
c(5, 2)
)  # grouping pattern
p = sum(subnetSize.X)
q = sum(subnetSize.E)
X.layer = GenerateLayer(n, subnetSize.X, group, D=1, sparsity=sparsity.Theta/p)
E.layer = GenerateLayer(n, subnetSize.E, group, D=1, sparsity=sparsity.Theta/q)
## generate group structure for coef array
B0.group.array = array(0, c(p,q,K))
g = 1
for(i in 1:p){
for(j in 1:q){
B0.group.array[i,j,] = g
g = g+1
}
}
B0.array = CoefArray(B0.group.array)
Theta0.array = array(0, c(q,q,K))
for(k in 1:K){
Theta0.array[,,k] = with(E.layer,
diag(diag(Omega[[k]])^(-0.5)) %*% Omega[[k]] %*% diag(diag(Omega[[k]])^(-0.5)))
}
## make Y-layer
Y.layer = E.layer
for(k in 1:K){
Y.layer$data[[k]] = X.layer$data[[k]] %*% B0.array[,,k] + E.layer$data[[k]]
}
##### Given: X.list, Y.list, B.groups, Theta.groups
Y.list = lapply(Y.layer$data, as.matrix)
Y.indices = Y.layer$indices
Theta.groups = Y.layer$groups
X.list = lapply(X.layer$data, as.matrix)
Theta.group.array = array(0, c(q,q,K))
for(j in 1:q){
Theta.group.array[j,-j,] = Y.layer$groups[[j]]
}
for(k in 1:K){
Y.list[[k]] = scale(Y.list[[k]], center=T, scale=F)
}
gamma = sqrt(log(p)/n) * seq(1, 0.4, -0.1)
bic.jsem <- sel.lambda.jsem(do.call(rbind, Y.list), do.call(rbind, Y.list),
unlist(Y.indices), unlist(Y.indices),
Theta.groups,lambda=gamma)
gamma.min = gamma[which.min(bic.jsem$BIC)]
jsem.model = JSEM(do.call(rbind, Y.list), unlist(X.indices),
Zeta.groups, lambda=gamma.min)
Theta_new.array = array(0, c(q,q,K))
for(k in 1:K){
Theta_new.array[,,k] = jsem.model$Theta[[k]]
}
TP.Theta = sum(Theta0.array != 0 & Theta_new.array != 0)
TN.Theta = sum(Theta0.array == 0 & Theta_new.array == 0)
FP.Theta = sum(Theta0.array != 0) - TP.Theta
FN.Theta = sum(Theta0.array == 0) - TN.Theta
cat("=============\nReplication",rep,"done!\n=============\n")
rbind(c(evaluate(TP.Theta,TN.Theta,FP.Theta,FN.Theta),
sqrt(sum((Theta0.array - Theta_new.array)^2)/sum(Theta0.array^2)))
)
library(glasso)
library(parallel)
for(k in 1:K){
Y.list[[k]] = scale(Y.list[[k]], center=T, scale=F)
}
gamma = sqrt(log(p)/n) * seq(1, 0.4, -0.1)
bic.jsem <- sel.lambda.jsem(do.call(rbind, Y.list), do.call(rbind, Y.list),
unlist(Y.indices), unlist(Y.indices),
Theta.groups,lambda=gamma)
gamma.min = gamma[which.min(bic.jsem$BIC)]
jsem.model = JSEM(do.call(rbind, Y.list), unlist(X.indices),
Zeta.groups, lambda=gamma.min)
Theta_new.array = array(0, c(q,q,K))
for(k in 1:K){
Theta_new.array[,,k] = jsem.model$Theta[[k]]
}
jsem.model = JSEM(do.call(rbind, Y.list), unlist(Y.indices),
Zeta.groups, lambda=gamma.min)
jsem.model = JSEM(do.call(rbind, Y.list), unlist(Y.indices),
Theta.groups, lambda=gamma.min)
Theta_new.array = array(0, c(q,q,K))
for(k in 1:K){
Theta_new.array[,,k] = jsem.model$Theta[[k]]
}
TP.Theta = sum(Theta0.array != 0 & Theta_new.array != 0)
TN.Theta = sum(Theta0.array == 0 & Theta_new.array == 0)
FP.Theta = sum(Theta0.array != 0) - TP.Theta
FN.Theta = sum(Theta0.array == 0) - TN.Theta
cat("=============\nReplication",rep,"done!\n=============\n")
rbind(c(evaluate(TP.Theta,TN.Theta,FP.Theta,FN.Theta),
sqrt(sum((Theta0.array - Theta_new.array)^2)/sum(Theta0.array^2)))
)
evaluate = function(TP,TN,FP,FN){
SEN = TP/(TP+FN)
SPE = TN/(TN+FP)
MCC = (TP*TN - FP*FN)/sqrt(TP+FP)/sqrt(TP+FN)/sqrt(TN+FP)/sqrt(TN+FN)
F1 = 2*TP/(2*TP+FP+FN)
c(SEN,SPE,MCC,F1)
}
rbind(c(evaluate(TP.Theta,TN.Theta,FP.Theta,FN.Theta),
sqrt(sum((Theta0.array - Theta_new.array)^2)/sum(Theta0.array^2)))
)
analyze("est_n100p30q60")
analyze("jsem_n100p60q30")
rm(list=ls())
setwd('d:/Study/My projects/Stratified-mult-GGM/Codes/jsem_outputs/')
analyze = function(list, broken=FALSE, array=NULL, range=NULL){
matrix.list = list()
if(broken){
output = list()
index = 1
for(i in array){
load(paste0(list,"_",i,".Rda"))
output[[index]] = rbind(apply(simplify2array(out.mat), 1:2, mean),
apply(simplify2array(out.mat), 1:2, sd))
index = index+1
}
output = round(apply(simplify2array(output), 1:2, mean),3)
} else{
load(paste0(list,".Rda"))
if(is.null(range)){
range = 1:length(out.mat)
}
output =  rbind(round(apply(simplify2array(out.mat)[,,range], 1:2, mean),3),
round(apply(simplify2array(out.mat)[,,range], 1:2, sd),3))
}
output
}
analyze.size = function(list, broken=FALSE){
vec.list = list()
if(broken){
for(i in 1:5){
load(paste0(list,"_",i,".Rda"))
vec.list[[i]] = as.numeric(unlist(out.mat))
vector = as.numeric(unlist(vec.list))
}
} else{
load(paste0(list,".Rda"))
vector = as.numeric(unlist(out.mat))
}
c(round(mean(vector),3), round(sd(vector),3))
}
analyze("jsem_n100p60q30")
analyze("jsem_n100p60q30")
load("D:/Study/My projects/Stratified-mult-GGM/Codes/jsem_outputs/jsem_n100p30q60.Rda")
out.mat
rm(list=ls())
setwd('d:/Study/My projects/Stratified-mult-GGM/Codes/jsem_outputs/')
analyze = function(list, broken=FALSE, array=NULL, range=NULL){
matrix.list = list()
if(broken){
output = list()
index = 1
for(i in array){
load(paste0(list,"_",i,".Rda"))
output[[index]] = rbind(apply(matrix(unlist(out.mat)), 1, mean),
apply(matrix(unlist(out.mat)), 1, sd))
index = index+1
}
output = round(apply(matrix(unlist(output)), 1, mean),3)
} else{
load(paste0(list,".Rda"))
if(is.null(range)){
range = 1:length(out.mat)
}
output =  rbind(round(apply(matrix(unlist(out.mat))[,,range], 1, mean),3),
round(apply(matrix(unlist(out.mat))[,,range], 1, sd),3))
}
output
}
analyze("jsem_n100p60q30")
rbind(round(apply(matrix(unlist(out.mat))[,,range], 1, mean),3),
round(apply(matrix(unlist(out.mat))[,,range], 1, sd),3))
load("D:/Study/My projects/Stratified-mult-GGM/Codes/jsem_outputs/jsem_n100p30q60.Rda")
rbind(round(apply(matrix(unlist(out.mat))[,,range], 1, mean),3),
round(apply(matrix(unlist(out.mat))[,,range], 1, sd),3))
rbind(round(apply(matrix(unlist(out.mat)), 1, mean),3),
round(apply(matrix(unlist(out.mat)), 1, sd),3))
out.mat = matrix(unlist(out.mat), ncol=6, byrow=T)
out.mat
out.mat = matrix(unlist(out.mat), ncol=6, byrow=T)
load("D:/Study/My projects/Stratified-mult-GGM/Codes/jsem_outputs/jsem_n100p30q60.Rda")
out.mat
out.mat1 = matrix(unlist(out.mat), ncol=6, byrow=T)
out.mat1 = matrix(unlist(out.mat), ncol=5, byrow=T)
out.mat1
analyze = function(list, broken=FALSE, array=NULL, range=NULL){
rbind(round(apply(out.mat1, 1, mean),3),
round(apply(out.mat1, 1, sd),3))
}
analyze("jsem_n100p60q30")
analyze = function(list, broken=FALSE, array=NULL, range=NULL){
rbind(round(apply(out.mat1, 2, mean),3),
round(apply(out.mat1, 2, sd),3))
}
analyze("jsem_n100p60q30")
analyze("jsem_n100p30q60")
analyze = function(list, broken=FALSE, array=NULL, range=NULL){
out.mat1 = matrix(unlist(out.mat), ncol=5, byrow=T)
rbind(round(apply(out.mat1, 2, mean),3),
round(apply(out.mat1, 2, sd),3))
}
analyze("jsem_n100p60q30")
analyze("jsem_n100p30q60")
load("D:/Study/My projects/Stratified-mult-GGM/Codes/jsem_outputs/jsem_n100p30q60.Rda")
out.mat
load("D:/Study/My projects/Stratified-mult-GGM/Codes/jsem_outputs/jsem_n100p60q30.Rda")
out.mat
analyze = function(filename, broken=FALSE, array=NULL, range=NULL){
load(paste0(filename,".Rda"))
out.mat1 = matrix(unlist(out.mat), ncol=5, byrow=T)
rbind(round(apply(out.mat1, 2, mean),3),
round(apply(out.mat1, 2, sd),3))
}
analyze("jsem_n100p60q30")
analyze("jsem_n100p30q60")
rm(list=ls())
setwd('d:/Study/My projects/Stratified-mult-GGM/Codes/estimation_outputs/')
analyze = function(list, broken=FALSE, array=NULL, range=NULL){
matrix.list = list()
if(broken){
output = list()
index = 1
for(i in array){
load(paste0(list,"_",i,".Rda"))
output[[index]] = rbind(apply(simplify2array(out.mat), 1:2, mean),
apply(simplify2array(out.mat), 1:2, sd))
index = index+1
}
output = round(apply(simplify2array(output), 1:2, mean),3)
} else{
load(paste0(list,".Rda"))
if(is.null(range)){
range = 1:length(out.mat)
}
output =  rbind(round(apply(simplify2array(out.mat)[,,range], 1:2, mean),3),
round(apply(simplify2array(out.mat)[,,range], 1:2, sd),3))
}
output
}
analyze.size = function(list, broken=FALSE){
vec.list = list()
if(broken){
for(i in 1:5){
load(paste0(list,"_",i,".Rda"))
vec.list[[i]] = as.numeric(unlist(out.mat))
vector = as.numeric(unlist(vec.list))
}
} else{
load(paste0(list,".Rda"))
vector = as.numeric(unlist(out.mat))
}
c(round(mean(vector),3), round(sd(vector),3))
}
analyze("est_n100p60q30", range=1:10)
analyze("est_n100p60q30")
analyze("est_n100p30q60")
analyze("est_n150p200q200", broken=T, array=1:5)
analyze("est_n150p300q300", broken=T, array=1:5)
analyze("est_n100p200q200modelB", broken=T, array=1:5)
analyze("est_n200p200q200modelB", broken=T, array=1:5)
rm(list=ls())
setwd('d:/Study/My projects/Stratified-mult-GGM/Codes/jsem_outputs/')
analyze = function(filename, broken=FALSE, array=NULL, range=NULL){
load(paste0(filename,".Rda"))
out.mat1 = matrix(unlist(out.mat), ncol=5, byrow=T)
rbind(round(apply(out.mat1, 2, mean),3),
round(apply(out.mat1, 2, sd),3))
}
analyze("jsem_n100p60q30")
analyze("jsem_n100p30q60")
analyze("jsem_n150p200q200")
analyze("jsem_n150p300q300")
rm(list=ls())
setwd('d:/Study/My projects/Stratified-mult-GGM/Codes/estimation_outputs/')
analyze = function(list, broken=FALSE, array=NULL, range=NULL){
matrix.list = list()
if(broken){
output = list()
index = 1
for(i in array){
load(paste0(list,"_",i,".Rda"))
output[[index]] = rbind(apply(simplify2array(out.mat), 1:2, mean),
apply(simplify2array(out.mat)/sqrt(5), 1:2, sd))
index = index+1
}
output = round(apply(simplify2array(output), 1:2, mean),3)
} else{
load(paste0(list,".Rda"))
if(is.null(range)){
range = 1:length(out.mat)
}
output =  rbind(round(apply(simplify2array(out.mat)[,,range], 1:2, mean),3),
round(apply(simplify2array(out.mat)[,,range], 1:2, sd)/sqrt(5),3))
}
output
}
analyze.size = function(list, broken=FALSE){
vec.list = list()
if(broken){
for(i in 1:5){
load(paste0(list,"_",i,".Rda"))
vec.list[[i]] = as.numeric(unlist(out.mat))
vector = as.numeric(unlist(vec.list))
}
} else{
load(paste0(list,".Rda"))
vector = as.numeric(unlist(out.mat))
}
c(round(mean(vector),3), round(sd(vector),3))
}
analyze("est_n100p60q30")
analyze("est_n100p30q60")
analyze("est_n150p200q200", broken=T, array=1:5)
analyze("est_n150p300q300", broken=T, array=1:5)
analyze("est_n100p200q200modelB", broken=T, array=1:5)
analyze("est_n200p200q200modelB", broken=T, array=1:5)
analyze("estmis_n100p60q30")
analyze("estmis_n100p30q60")
analyze("estmis_n150p200q200", broken=T, array=1:4)
analyze("estmis_n150p300q300", broken=T, array=1:4)
analyze("estmis_n100p200q200modelB", broken=T, array=1:4)
analyze("estmis_n200p200q200modelB", broken=T, array=1:4)
analyze("jsem_n100p200q200modelB")
rm(list=ls())
setwd('d:/Study/My projects/Stratified-mult-GGM/Codes/jsem_outputs/')
analyze = function(filename, broken=FALSE, array=NULL, range=NULL){
load(paste0(filename,".Rda"))
out.mat1 = matrix(unlist(out.mat), ncol=5, byrow=T)
rbind(round(apply(out.mat1, 2, mean),3),
round(apply(out.mat1, 2, sd),3))
}
analyze("jsem_n100p60q30")
analyze("jsem_n100p30q60")
analyze("jsem_n150p200q200")
analyze("jsem_n150p300q300")
analyze("jsem_n100p200q200modelB")
rm(list=ls())
setwd('d:/Study/My projects/Stratified-mult-GGM/Codes/jsem_outputs/')
analyze = function(filename, broken=FALSE, array=NULL, range=NULL){
load(paste0(filename,".Rda"))
out.mat1 = matrix(unlist(out.mat), ncol=5, byrow=T)
rbind(round(apply(out.mat1, 2, mean),3),
round(apply(out.mat1, 2, sd)/sqrt(5),3))
}
analyze("jsem_n100p60q30")
analyze("jsem_n100p30q60")
analyze("jsem_n150p200q200")
analyze("jsem_n150p300q300")
analyze("jsem_n200p200q200modelB")
analyze("jsem_n100p200q200modelB")
